mod create;
mod func;

use actix_web::{App, HttpServer, middleware};
use actix_web::web::Data;
use mysql_async::Pool;
use mysql_async::Opts;
extern crate mysql_async;
#[macro_use]
extern crate validator_derive;


#[actix_web::main]
async fn main() -> std::io::Result<()> {
    dotenv::dotenv().ok();
    std::env::set_var("RUST_LOG", "actix_web=debug");
    env_logger::init();

    let database_url = std::env::var("DATABASE_URL").expect("DATABASE_URL must be set");

    let opts = Opts::from_url(&database_url).expect("Failed to parse database URL");
    let pool = Pool::new(opts);

    match func::ensure_database_and_table_exists(&pool).await {
        Ok(_) => println!("Database and table ready"),
        Err(e) => eprintln!("Failed to create database or table: {}", e),
    }

    HttpServer::new(move || {
        let cors = actix_cors::Cors::default()
            .allowed_origin("http://localhost:8084")
            .allowed_methods(vec!["GET", "POST"])
            .allowed_headers(vec![http::header::AUTHORIZATION, http::header::ACCEPT])
            .allowed_header(http::header::CONTENT_TYPE)
            .supports_credentials()
            .max_age(3600); 
        App::new()
            .wrap(
                middleware::Logger::new("%s %{User-Agent}i %m %U%q %H  %b %{Referer}i %{X-Forwarded-For}i %D")
            )
            .wrap(cors)
            .app_data(Data::new(pool.clone()))
            .service(create::register::create_account)
            .service(create::verify::handle_verification_link)
            .service(create::sbverification::resend_verification)
            .service(create::reset::reset_password)
            .service(create::forgot::forgot_password)
            .service(create::login::login)
            
        } )
        .bind(("localhost", 8084))?
        .run()
        .await
}


